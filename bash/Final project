class CheckerBoard:
    def __init__(self):
        self.board = [[' ' for _ in range(8)] for _ in range(8)]
        self.populate_board()

    def populate_board(self):
        # Set the pieces for player 1
        for row in range(3):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 'X'

        # Set the pieces for player 2
        for row in range(5, 8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    self.board[row][col] = 'O'

    def display_board(self):
        print("  0 1 2 3 4 5 6 7")
        for i, row in enumerate(self.board):
            print(i, end=' ')
            for col in row:
                print(col, end=' ')
            print()

    def is_valid_move(self, start, end, player):
        # Implement validation logic for a move
        pass

    def make_move(self, start, end, player):
        # Implement logic to make a move
        pass

    def is_winner(self, player):
        # Implement logic to check if a player has won
        pass


def main():
    checker_board = CheckerBoard()
    current_player = 'X'

    while True:
        checker_board.display_board()

        try:
            start = tuple(map(int, input(f"Player {current_player}, enter start coordinates (row col): ").split()))
            end = tuple(map(int, input(f"Player {current_player}, enter end coordinates (row col): ").split()))
        except ValueError:
            print("Invalid input. Please enter valid coordinates.")
            continue

        if checker_board.is_valid_move(start, end, current_player):
            checker_board.make_move(start, end, current_player)

            if checker_board.is_winner(current_player):
                print(f"Player {current_player} wins!")
                break

            # Switch to the other player
            current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Invalid move. Try again.")

if __name__ == "__main__":
    main()
